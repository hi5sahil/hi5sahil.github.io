---
title: Python Notes!
date: "22 Jan 2021"
header:
  show_overlay_excerpt: false
---


Reference: 
[python-namedtuple-working-and-benefits-of-namedtuple-in-python](https://medium.com/@rinu.gour123/python-namedtuple-working-and-benefits-of-namedtuple-in-python-276d679b2e9c#:~:text=Benefits%20of%20Python%20Namedtuple&text=Unlike%20a%20regular%20tuple%2C%20python,using%20names%20of%20the%20fields.&text=2.,is%20faster%20than%20a%20dictionary.)
Benefits of Python Namedtuple
Of course, no one would be using these if they observed no benefits at all. So, here we go:
1. Unlike a regular tuple, python namedtuple can also access values using names of the fields.
>>> red.red
255
2. Python namedtuple is just as memory-efficient as a regular tuple, because it does not have per-instance dictionaries. This is also why it is faster than a dictionary.


Reference: 
[what-does-if-name-main-do](https://stackoverflow.com/questions/419163/what-does-if-name-main-do)
[why-use-def-main](https://stackoverflow.com/questions/4041238/why-use-def-main)
Reasons to have that if statement calling main() (in no particular order):

Other languages (like C and Java) have a main() function that is called when the program is executed. Using this if, we can make Python behave like them, which feels more familiar for many people.

Code will be cleaner, easier to read, and better organized. (yeah, I know this is subjective)

It will be possible to import that python code as a module without nasty side-effects.

This means it will be possible to run tests against that code.

This means we can import that code into an interactive python shell and test/debug/run it.

Variables inside def main are local, while those outside it are global. This may introduce a few bugs and unexpected behaviors.

But, you are not required to write a main() function and call it inside an if statement.

I myself usually start writing small throwaway scripts without any kind of function. If the script grows big enough, or if I feel putting all that code inside a function will benefit me, then I refactor the code and do it. This also happens when I write bash scripts.

Even if you put code inside the main function, you are not required to write it exactly like that. A neat variation could be:

import sys

def main(argv):
    # My code here
    pass

if __name__ == "__main__":
    main(sys.argv)
